/**
 * Created by yeniovianti on 4/23/15.
 */

/**
 * Helper to use the Command Line Interface (CLI) easily with both Windows and Unix environments.
 * Requires underscore or lodash as global through "_".
 */
var Cli = (function () {
    function Cli() {}

    /**
     * Execute a CLI command.
     * Manage Windows and Unix environment and try to execute the command on both env if fails.
     * Order: Windows -> Unix.
     *
     * @param command                   Command to execute. ('grunt')
     * @param args                      Args of the command. ('watch')
     * @param callback                  Success.
     * @param callbackErrorWindows      Failure on Windows env.
     * @param callbackErrorUnix         Failure on Unix env.
     */
    Cli.execute = function (command, args, callback, callbackErrorWindows, callbackErrorUnix, convertSuccessCallback, convertFailedCallback) {
        if (typeof args === "undefined") {
            args = [];
        }
        Cli.windows(command, args, callback, function () {
            callbackErrorWindows();

            try {
                Cli.unix(command, args, callback, callbackErrorUnix, convertSuccessCallback, convertFailedCallback);
            } catch (e) {
                console.log('------------- Failed to perform the command: "' + command + '" on all environments. -------------');
            }
        }, convertSuccessCallback, convertFailedCallback);
    };

    /**
     * Execute a command on Windows environment.
     *
     * @param command       Command to execute. ('grunt')
     * @param args          Args of the command. ('watch')
     * @param callback      Success callback.
     * @param callbackError Failure callback.
     */
    Cli.windows = function (command, args, callback, callbackError, convertSuccessCallback, convertFailedCallback) {
        if (typeof args === "undefined") {
            args = [];
        }
        try {
            Cli._execute(process.env.comspec, _.union(['/c', command], args), convertSuccessCallback, convertFailedCallback);
            callback(command, args, 'Windows');
        } catch (e) {
            callbackError(command, args, 'Windows');
        }
    };

    /**
     * Execute a command on Unix environment.
     *
     * @param command       Command to execute. ('grunt')
     * @param args          Args of the command. ('watch')
     * @param callback      Success callback.
     * @param callbackError Failure callback.
     */
    Cli.unix = function (command, args, callback, callbackError, convertSuccessCallback, convertFailedCallback) {
        //console.log(command + " " + args);
        if (typeof args === "undefined") {
            args = [];
        }
        try {
            Cli._execute(command, args, convertSuccessCallback, convertFailedCallback);
            callback(command, args, 'Unix');
        } catch (e) {
            console.error(e.message);
            callbackError(command, args, 'Unix');
        }
    };

    /**
     * Execute a command no matters what's the environment.
     *
     * @param command   Command to execute. ('grunt')
     * @param args      Args of the command. ('watch')
     * @private
     */
    Cli._execute = function (command, args, convertSuccessCallback, convertFailedCallback) {
        var spawn = require('child_process').spawn;
        var childProcess = spawn(command, args);
        var pageCount = 0;
        childProcess.stdout.on("data", function (data) {

            if(data.toString() === "dconverter success"){
                if(typeof(convertSuccessCallback) === 'function'){
                    convertSuccessCallback(pageCount);
                }
            }
            if(data.toString() === "dconverter failed"){
                console.log("debug ---");
                if(typeof(convertFailedCallback) === 'function'){
                    convertFailedCallback.call();
                }
            }
            var keywordToFind = "Processing pages 1 through";
            var findDataIndex  = data.toString().indexOf(keywordToFind);
            if(findDataIndex != -1){
                var startIdx = findDataIndex + keywordToFind.length
                pageCount = data.toString().substring(startIdx, data.toString().length).replace('.', '');
            }
            console.log(data.toString());
        });

        childProcess.stderr.on("data", function (data) {
            console.error(data.toString());
        });
    };

    Cli.test = function(){
        return true;
    }
    return Cli;
})();

module.exports.Cli = Cli;
